import pymongo
import time
import re
import numpy as np
from sentence_transformers import SentenceTransformer

# Connexion √† MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")
db = client["jira"]  # Base de donn√©es
collection = db["tickets"]  # Collection des tickets

# Charger le mod√®le d'embedding NLP
model = SentenceTransformer("all-MiniLM-L6-v2")  # Mod√®le l√©ger pour les embeddings

def store_ticket_in_mongo(ticket_data):
    """
    Stocke uniquement l'ID, le probl√®me, la solution, les mots-cl√©s et l'embedding dans MongoDB.
    
    Args:
        ticket_data (dict): Dictionnaire contenant les informations du ticket.
    
    Returns:
        str: ID du ticket stock√©
    """
    # Extraire les donn√©es du dictionnaire
    ticket_id = ticket_data.get("ID", "")  # G√©n√©rer un ID si absent
    problem = ticket_data.get("problem", "Inconnu")
    solution = ticket_data.get("solution", "Non r√©solu")
    keywords = ticket_data.get("keywords", "")
    
    # V√©rifier si l'ID existe d√©j√†
    existing_ticket = collection.find_one({"_id": ticket_id})
    if existing_ticket:
        print(f"‚ö†Ô∏è L'ID {ticket_id} existe d√©j√†. Mise √† jour...")
        collection.replace_one({"_id": ticket_id}, ticket_data)
    
    

    # G√©n√©rer un embedding bas√© sur le probl√®me et les mots-cl√©s
    text_to_embed = f"Probl√®me: {problem}\nMots-cl√©s: {keywords}"
    embedding_vector = model.encode(text_to_embed).tolist()
    
    # Cr√©ation du document minimal √† stocker
    ticket_data = {
        "_id": ticket_id,
        "problem": problem,
        "solution": solution,
        "keywords": keywords,
        "embedding": embedding_vector,
        "timestamp": time.time()
    }
    
    try:
        collection.insert_one(ticket_data)
        print(f"‚úÖ Ticket {ticket_id} ajout√© √† MongoDB.")
        return ticket_id
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout du ticket {ticket_id}: {e}")
        return None

def get_collection_stats():
    """Retourne des statistiques sur la collection de tickets."""
    try:
        count = collection.count_documents({})
        return {
            "count": count,
            "status": "active" if count > 0 else "empty"
        }
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des statistiques: {e}")
        return {"count": 0, "status": "error", "message": str(e)}

def query_raw_collection():
    """
    Affiche les 5 derniers tickets stock√©s dans MongoDB.
    """
    try:
        tickets = collection.find({}, {"_id": 1, "problem": 1, "solution": 1, "keywords": 1}).sort("timestamp", -1).limit(5)
        print("\nüîç Derniers tickets stock√©s:")
        for ticket in tickets:
            print(f"  - ID: {ticket['_id']}, Probl√®me: {ticket['problem']}, Solution: {ticket['solution'][:50]}...")
    except Exception as e:
        print(f"Erreur lors de la requ√™te: {e}")